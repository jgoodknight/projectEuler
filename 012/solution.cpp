//Project Euler
//
//PROBLEM 12
//Solution by Joseph Goodknight
//j@JosephGoodknight.com
// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

#include <iostream>
#include <vector>
#include <list>
#include <cmath>
#include <algorithm>

#include <omp.h>

const int goalNumberOfDivisors = 500;

std::list<long> listOfFactorsOfLong(long toBeFactored) {
	std::list<long> output;
	for (int possibleFactor = 1; possibleFactor <= std::sqrt(toBeFactored); ++possibleFactor)
	{
		if(toBeFactored % possibleFactor == 0) 
		{
			output.push_back(possibleFactor);
			//deal with 1 and numbers which are perfect quares and don't double count those factors
			if(possibleFactor != toBeFactored / possibleFactor) 
			{
				output.push_back(toBeFactored / possibleFactor);
			}
		}
	}
	return output;
}

int numberOfFactorsInLong(long toBeFactored) 
{
	std::list<long> myFactors = listOfFactorsOfLong(toBeFactored);
	return myFactors.size();
}

int main() 
{	
	int currentNumberOfFactors = 1;

	long currentNaturalNumber = 1;
	long currentTriangleNumber = 1;

	while(currentNumberOfFactors < goalNumberOfDivisors) 
	{
		currentNaturalNumber = currentNaturalNumber + 1;
		currentTriangleNumber = currentTriangleNumber + currentNaturalNumber;

		currentNumberOfFactors = numberOfFactorsInLong(currentTriangleNumber);
	}
	std::cout << "ANSWER: " << currentTriangleNumber <<"\n";
	for(long f : listOfFactorsOfLong(currentTriangleNumber)) {
		std::cout << f << ", ";
	}
	std::cout << "\n";

	return 0;
}






